@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
  box-sizing: border-box;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  /* color: var(--foreground); */
  /* background: var(--background); */
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer components {
  .menu {
    @apply w-full min-w-0;
    & .menu-button {
      @apply flex justify-center items-center w-full text-left;
    }
    & .menu-list {
      @apply max-h-48 overflow-y-auto bg-inherit;
    }
    & .menu-item {
      @apply flex items-center;
    }
    &[aria-expanded="true"] .menu-list-wrapper {
      @apply grid-rows-[1fr] opacity-100;
    }
    & .menu-list-wrapper {
      @apply grid grid-rows-[0fr] duration-150 z-10 opacity-0 relative w-full overflow-hidden;
      transition-property: grid, opacity, margin;
    }
  }

  .subtask {
    & svg {
      & circle:first-child {
        @apply transition-all duration-200 fill-white stroke-gray-200;
      }
      & circle:nth-child(2) {
        @apply fill-white  rotate-[200deg] origin-center transition-all duration-200;
      }
      & polyline {
        @apply fill-none stroke-white transition-all duration-200 delay-150;
        stroke-dashoffset: -1;
      }
    }

    & input[checked] + svg {
      & circle:first-child {
        @apply stroke-transparent fill-current;
      }
      & circle:nth-child(2) {
        @apply fill-current stroke-current;
        stroke-width: 6;
      }
      & polyline {
        stroke-dashoffset: 0;
      }
    }
  }
}

dialog[open] {
  transform: translateY(0);
}

dialog {
  /* Final state of the exit animation */
  transform: translateY(-100%);
  transition:
    transform 300ms,
    overlay 300ms allow-discrete,
    display 300ms allow-discrete;
  @apply ease-in-out;
}

@starting-style {
  dialog[open] {
    transform: translateY(-100%);
  }
}

/* Transition for the popover's backdrop */

dialog::backdrop {
  background-color: rgb(0 0 0 / 0%);
  transition:
    display 0.7s allow-discrete,
    overlay 0.7s allow-discrete,
    background-color 0.7s;
}

dialog[open]::backdrop {
  background-color: rgb(0 0 0 / 25%);
}

/* Nesting selectors (&) cannot represent pseudo-elements, so this 
   starting-style rule cannot be nested. */

@starting-style {
  dialog[open]::backdrop {
    background-color: rgb(0 0 0 / 0%);
  }
}
